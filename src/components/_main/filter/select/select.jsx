import React from "react";
import { Box, Popover, TextField } from "@mui/material";
import InputAdornment from "@mui/material/InputAdornment";
import RootStyled from "./styled";

export default function Contact({ ...props }) {
  const { data, label, isSearch } = props;
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [country, setCountry] = React.useState("");
  const [search, setSearch] = React.useState("");
  const [filtered, setFiltered] = React.useState("");

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);
  const id = open ? "simple-popover" : undefined;

  const onChangeSearch = (e) => {
    setSearch(e.target.value);
    const filteredData = data.filter((v) =>
      v.toLowerCase().includes(e.target.value.toLowerCase())
    );
    setFiltered(filteredData);
  };
  return (
    <RootStyled>
      <Box className="select-main">
        <Box
          className="country-select"
          aria-describedby={id}
          onClick={handleClick}
        >
          {isSearch && (
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M21.1098 17.576C22.1394 15.8987 22.683 13.9686 22.6803 12.0005V12.0001C22.683 10.032 22.1393 8.10184 21.1098 6.42452L21.1039 6.41536C20.1488 4.85857 18.8103 3.57274 17.2165 2.68072C15.6227 1.78871 13.8268 1.32032 12.0003 1.32031C10.1739 1.32031 8.37796 1.78868 6.78415 2.68068C5.19033 3.57268 3.85189 4.85851 2.89672 6.41529L2.89079 6.42456C1.86379 8.10303 1.32032 10.0325 1.32031 12.0003C1.3203 13.968 1.86376 15.8975 2.89074 17.576L2.89678 17.5854C3.85195 19.1422 5.19039 20.428 6.78419 21.32C8.378 22.2119 10.1739 22.6803 12.0004 22.6803C13.8268 22.6803 15.6227 22.2119 17.2165 21.3199C18.8103 20.4279 20.1487 19.1421 21.1039 17.5853L21.1098 17.576ZM13.3655 20.8499C13.1619 21.0463 12.9277 21.208 12.672 21.3288C12.4621 21.4286 12.2327 21.4803 12.0003 21.4803C11.7679 21.4803 11.5385 21.4286 11.3286 21.3288C10.842 21.0803 10.4255 20.7137 10.1171 20.2627C9.48722 19.3525 9.02046 18.3398 8.73764 17.2697C9.8241 17.2029 10.9117 17.1688 12.0003 17.1676C13.0885 17.1676 14.1761 17.2016 15.2632 17.2697C15.1066 17.8199 14.9111 18.3583 14.678 18.8807C14.3712 19.6154 13.9255 20.284 13.3655 20.8499ZM2.54119 12.6003H6.84895C6.877 13.8023 7.00729 14.9998 7.23841 16.1797C6.06084 16.2833 4.88627 16.4257 3.71471 16.6067C3.02867 15.3759 2.62764 14.0068 2.54119 12.6003ZM3.71471 7.39393C4.8858 7.57541 6.06078 7.71777 7.23964 7.821C7.00807 9.00084 6.87749 10.1983 6.84934 11.4003H2.54119C2.62764 9.99386 3.02867 8.62475 3.71471 7.39393ZM10.6352 3.15071C10.8387 2.95434 11.0729 2.79255 11.3286 2.67176C11.5385 2.57204 11.7679 2.5203 12.0003 2.5203C12.2327 2.5203 12.4621 2.57204 12.672 2.67176C13.1586 2.92031 13.5751 3.28687 13.8835 3.73792C14.5134 4.64806 14.9801 5.6608 15.263 6.73087C14.1765 6.79773 13.089 6.83179 12.0003 6.83305C10.9121 6.83303 9.82449 6.79897 8.73745 6.73086C8.89399 6.18067 9.08953 5.64234 9.32258 5.11994C9.62944 4.38525 10.0751 3.71663 10.6352 3.15071ZM21.4594 11.4003H17.1517C17.1236 10.1983 16.9933 9.00083 16.7622 7.82089C17.9398 7.71727 19.1144 7.57495 20.2859 7.39393C20.972 8.62475 21.373 9.99386 21.4594 11.4003ZM8.44533 16.0864C8.21065 14.9384 8.07811 13.7718 8.04926 12.6003H15.9515C15.9229 13.7718 15.7906 14.9384 15.5561 16.0865C14.3722 16.0088 13.1869 15.9691 12.0003 15.9676C10.8146 15.9676 9.6296 16.0072 8.44533 16.0864ZM15.5553 7.91418C15.7899 9.06225 15.9225 10.2289 15.9513 11.4003H8.04913C8.07772 10.2289 8.21001 9.06224 8.44447 7.91413C9.62845 7.99181 10.8137 8.03144 12.0003 8.03303C13.186 8.03303 14.371 7.99341 15.5553 7.91418ZM17.1513 12.6003H21.4594C21.373 14.0068 20.9719 15.3759 20.2859 16.6067C19.1148 16.4252 17.9398 16.2828 16.761 16.1796C16.9926 14.9998 17.1231 13.8023 17.1513 12.6003ZM19.5664 6.28946C18.5425 6.43719 17.5155 6.55415 16.4854 6.64034C16.3003 5.95108 16.0616 5.27736 15.7713 4.62534C15.5064 4.02533 15.173 3.45795 14.7778 2.93447C16.6877 3.5202 18.3637 4.69442 19.5664 6.28946ZM5.29691 5.29691C6.39249 4.20029 7.74035 3.38916 9.22232 2.93461C9.19984 2.96374 9.17671 2.99157 9.15455 3.02129C8.39281 4.11784 7.83796 5.34442 7.51735 6.64052C6.48725 6.55328 5.45953 6.43625 4.43421 6.28946C4.69865 5.93919 4.9869 5.60756 5.29691 5.29691ZM4.4342 17.7111C5.45811 17.5634 6.4851 17.4464 7.51515 17.3603C7.70028 18.0495 7.93904 18.7233 8.22926 19.3753C8.49423 19.9753 8.82763 20.5427 9.22282 21.0661C7.31294 20.4804 5.63696 19.3062 4.4342 17.7111ZM18.7037 18.7037C17.6081 19.8003 16.2603 20.6115 14.7783 21.066C14.8008 21.0369 14.8239 21.009 14.8461 20.9793C15.6078 19.8828 16.1627 18.6562 16.4833 17.3601C17.5134 17.4473 18.5411 17.5644 19.5664 17.7112C19.302 18.0614 19.0137 18.393 18.7037 18.7037Z"
                fill="#232859"
              />
            </svg>
          )}
          {country || label}

          <Box className="country-label">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M11.9995 16.7996C11.2995 16.7996 10.5995 16.5296 10.0695 15.9996L3.54953 9.47965C3.25953 9.18965 3.25953 8.70965 3.54953 8.41965C3.83953 8.12965 4.31953 8.12965 4.60953 8.41965L11.1295 14.9396C11.6095 15.4196 12.3895 15.4196 12.8695 14.9396L19.3895 8.41965C19.6795 8.12965 20.1595 8.12965 20.4495 8.41965C20.7395 8.70965 20.7395 9.18965 20.4495 9.47965L13.9295 15.9996C13.3995 16.5296 12.6995 16.7996 11.9995 16.7996Z"
                fill="#232859"
              />
            </svg>
          </Box>
        </Box>
        <Popover
          id={id}
          open={open}
          anchorEl={anchorEl}
          onClose={handleClose}
          anchorOrigin={{
            vertical: "bottom",
            horizontal: "left",
          }}
        >
          <Box
            className={`is-search ${isSearch && "active"}`}
            sx={{
              //   height: 330,
              width: isSearch ? 530 : 257,
              p: 2,
              bgcolor: "common.white",
              position: "relative",
            }}
          >
            {isSearch && (
              <TextField
                value={search}
                onChange={onChangeSearch}
                fullWidth
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "& fieldset": {
                      borderRadius: "12px",
                    },
                  },
                  "& .MuiInputBase-root": {
                    height: 44,
                  },
                }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M11.5 21.75C5.85 21.75 1.25 17.15 1.25 11.5C1.25 5.85 5.85 1.25 11.5 1.25C17.15 1.25 21.75 5.85 21.75 11.5C21.75 17.15 17.15 21.75 11.5 21.75ZM11.5 2.75C6.67 2.75 2.75 6.68 2.75 11.5C2.75 16.32 6.67 20.25 11.5 20.25C16.33 20.25 20.25 16.32 20.25 11.5C20.25 6.68 16.33 2.75 11.5 2.75Z"
                          fill="#929EAE"
                        />
                        <path
                          d="M21.9999 22.7499C21.8099 22.7499 21.6199 22.6799 21.4699 22.5299L19.4699 20.5299C19.1799 20.2399 19.1799 19.7599 19.4699 19.4699C19.7599 19.1799 20.2399 19.1799 20.5299 19.4699L22.5299 21.4699C22.8199 21.7599 22.8199 22.2399 22.5299 22.5299C22.3799 22.6799 22.1899 22.7499 21.9999 22.7499Z"
                          fill="#929EAE"
                        />
                      </svg>
                    </InputAdornment>
                  ),
                }}
              />
            )}

            <Box sx={{ overflow: "auto", mt: isSearch ? 2 : 0 }}>
              {(filtered || data).map((option) => (
                <Box
                  onClick={() => {
                    setCountry(option);
                    handleClose();
                  }}
                  sx={{
                    "& > img": { mr: 2, flexShrink: 0 },
                    px: 2,
                    py: 1,
                    borderRadius: "4px",
                    cursor: "pointer",
                    "&:hover": {
                      bgcolor: (theme) => "#F9FAFB",
                    },
                    bgcolor: (theme) =>
                      country === option
                        ? "#F9FAFB"
                        : theme.palette.background.paper,
                    svg: {
                      float: "right",
                      mt: 0.2,
                    },
                  }}
                >
                  {option}{" "}
                  {country === option && (
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 20 20"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M16.6668 5L7.50016 14.1667L3.3335 10"
                        stroke="#2563EB"
                        stroke-width="1.66667"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  )}
                </Box>
              ))}
            </Box>
          </Box>
        </Popover>
      </Box>
    </RootStyled>
  );
}
